# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Move(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, piece: str=None, src: str=None, dst: str=None, is_check: bool=None, is_mate: bool=None, is_stalemate: bool=None, captured_piece: str=None):  # noqa: E501
        """Move - a model defined in Swagger

        :param piece: The piece of this Move.  # noqa: E501
        :type piece: str
        :param src: The src of this Move.  # noqa: E501
        :type src: str
        :param dst: The dst of this Move.  # noqa: E501
        :type dst: str
        :param is_check: The is_check of this Move.  # noqa: E501
        :type is_check: bool
        :param is_mate: The is_mate of this Move.  # noqa: E501
        :type is_mate: bool
        :param is_stalemate: The is_stalemate of this Move.  # noqa: E501
        :type is_stalemate: bool
        :param captured_piece: The captured_piece of this Move.  # noqa: E501
        :type captured_piece: str
        """
        self.swagger_types = {
            'piece': str,
            'src': str,
            'dst': str,
            'is_check': bool,
            'is_mate': bool,
            'is_stalemate': bool,
            'captured_piece': str
        }

        self.attribute_map = {
            'piece': 'piece',
            'src': 'src',
            'dst': 'dst',
            'is_check': 'is_check',
            'is_mate': 'is_mate',
            'is_stalemate': 'is_stalemate',
            'captured_piece': 'captured_piece'
        }

        self._piece = piece
        self._src = src
        self._dst = dst
        self._is_check = is_check
        self._is_mate = is_mate
        self._is_stalemate = is_stalemate
        self._captured_piece = captured_piece

    @classmethod
    def from_dict(cls, dikt) -> 'Move':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Move of this Move.  # noqa: E501
        :rtype: Move
        """
        return util.deserialize_model(dikt, cls)

    @property
    def piece(self) -> str:
        """Gets the piece of this Move.


        :return: The piece of this Move.
        :rtype: str
        """
        return self._piece

    @piece.setter
    def piece(self, piece: str):
        """Sets the piece of this Move.


        :param piece: The piece of this Move.
        :type piece: str
        """
        if piece is None:
            raise ValueError("Invalid value for `piece`, must not be `None`")  # noqa: E501

        self._piece = piece

    @property
    def src(self) -> str:
        """Gets the src of this Move.


        :return: The src of this Move.
        :rtype: str
        """
        return self._src

    @src.setter
    def src(self, src: str):
        """Sets the src of this Move.


        :param src: The src of this Move.
        :type src: str
        """
        if src is None:
            raise ValueError("Invalid value for `src`, must not be `None`")  # noqa: E501

        self._src = src

    @property
    def dst(self) -> str:
        """Gets the dst of this Move.


        :return: The dst of this Move.
        :rtype: str
        """
        return self._dst

    @dst.setter
    def dst(self, dst: str):
        """Sets the dst of this Move.


        :param dst: The dst of this Move.
        :type dst: str
        """
        if dst is None:
            raise ValueError("Invalid value for `dst`, must not be `None`")  # noqa: E501

        self._dst = dst

    @property
    def is_check(self) -> bool:
        """Gets the is_check of this Move.


        :return: The is_check of this Move.
        :rtype: bool
        """
        return self._is_check

    @is_check.setter
    def is_check(self, is_check: bool):
        """Sets the is_check of this Move.


        :param is_check: The is_check of this Move.
        :type is_check: bool
        """

        self._is_check = is_check

    @property
    def is_mate(self) -> bool:
        """Gets the is_mate of this Move.


        :return: The is_mate of this Move.
        :rtype: bool
        """
        return self._is_mate

    @is_mate.setter
    def is_mate(self, is_mate: bool):
        """Sets the is_mate of this Move.


        :param is_mate: The is_mate of this Move.
        :type is_mate: bool
        """

        self._is_mate = is_mate

    @property
    def is_stalemate(self) -> bool:
        """Gets the is_stalemate of this Move.


        :return: The is_stalemate of this Move.
        :rtype: bool
        """
        return self._is_stalemate

    @is_stalemate.setter
    def is_stalemate(self, is_stalemate: bool):
        """Sets the is_stalemate of this Move.


        :param is_stalemate: The is_stalemate of this Move.
        :type is_stalemate: bool
        """

        self._is_stalemate = is_stalemate

    @property
    def captured_piece(self) -> str:
        """Gets the captured_piece of this Move.


        :return: The captured_piece of this Move.
        :rtype: str
        """
        return self._captured_piece

    @captured_piece.setter
    def captured_piece(self, captured_piece: str):
        """Sets the captured_piece of this Move.


        :param captured_piece: The captured_piece of this Move.
        :type captured_piece: str
        """

        self._captured_piece = captured_piece
