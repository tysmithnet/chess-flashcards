swagger: "2.0"
info:
  description: "This is an API for chess games, openings, and moves"
  version: "1.0.0"
  title: "chess-flashcards"
host: "localhost:5000"
basePath: "/api/v1"
schemes:
- "http"
consumes:
- "application/json"
produces:
- "application/json"
paths:
  /fen:
    post:
      summary: "Apply the provided moves to the provided FEN"
      description: "The position on the board, described in FEN notation, is to have the moves applied to it, and the resulting FEN returned"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/FenRequest"
      responses:
        200:
          description: "Moves were successfully applied to the FEN, and a new FEN was returned"
          schema:
            type: "string"
        400:
          description: "The FEN was not valid, the moves were not valid, or both"
  /moves:
    get:
      summary: "Get moves for the given position"
      parameters: 
      - name: "fen"
        in: "query"
        description: "FEN of the position to find moves for"
        type: "string"
        required: true
      - name: "flags"
        in: "query"
        description: "Restrict the moves to certain types"
        type: "array"
        items:
          type: "string"
          enum:
          - "check"
          - "checkmate"
          - "stalemate"
          - "capture"
          - "enpessant"
          - "castle"
      responses:
        200:
          description: "Successfully found moves"
          schema:
            type: "array"
            items:
              $ref: '#/definitions/Move'
        400:
          description: "Position is not valid"
  /openings:
    get:
      summary: "Get all ECO openings"
      produces:
      - "application/json"
      responses:
        200:
          description: "Successfully got all ECO openings"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/OpeningMeta"
  /openings/{id}:
    get:
      summary: "Get an opening and its variants by id"
      parameters: 
      - name: "id"
        in: "path"
        description: "ECO id e.g. C42"
        required: true
        type: "string"
        pattern: "[A-E][0-9]{2}"
      responses:
        200:
          description: "Successfully found requested opening"
          schema:
            $ref: "#/definitions/Opening"
        400:
          description: "Invalid ECO id supplied"
        404:
          description: "Opening not found"
  /openings/search:
    get:
      summary: "Fuzzy search for openings"
      parameters:
      - name: "term"
        in: "query"
        description: "Search term to use in search"
        type: "string"
        required: true
      responses:
        200:
          description: "Search completed successfully"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Opening"
definitions:
  Move:
    description: "Represents a single move that a player can make during a turn"
    type: "object"
    required:
    - "piece"
    - "dst"
    - "src"
    properties:
      piece:
        description: "The piece being moved, white pieces are indicated by uppercase"
        type: "string"
        format: "[PNBRQKpnbrqk]"
      src:
        description: "The square that the piece was on at the start of the move"
        type: "string"
        format: "[a-g][1-8]"
      dst:
        description: "The square that the piece is on at the end of the move"
        type: "string"
        format: "[a-g][1-8]"
      is_check:
        description: "True if the move results in check, false otherwise"
        type: "boolean"
      is_mate:
        description: "True if the move results in checkmate, false otherwise"
        type: "boolean"
      is_stalemate:
        description: "True if the move results in stalemate, false otherwise"
        type: "boolean"
      is_enpessant:
        description: "True if the move was an en pessant capture"
        type: "boolean"
      is_castle:
        description: "True if the move is a castle"
        type: "boolean"
      captured_piece:
        description: "The piece that was captured if one was captured"
        type: "string"
        format: "[PNBRQKpnbrqk]"
      fen_after:
        description: "The fen of the board before the move"
        type: "string"
      fen_before:
        description: "The fen of the board at the end of the move"
        type: "string"
  Opening:
    description: "An ECO chess opening"
    type: "object"
    required:
    - "name"
    - "id"
    - "moves"
    properties:
      name: 
        description: "The human friendly name for the opening"
        type: "string"
      id: 
        description: "The ECO id for the opening, e.g. E04"
        type: "string"
        pattern: "[A-E][0-9]{2}"
      moves:
        description: "The mainline moves that identify this opening"
        type: "array"
        items:
          $ref: "#/definitions/Move"
      variants:
        description: "Variants of the opening if any exist"
        type: "array"
        items:
          $ref: "#/definitions/OpeningVariant"
  OpeningMeta:
    description: "The meta data for an ECO opening without the move data"
    type: "object"
    required:
    - "name"
    - "id"
    - "variant_names"
    properties:
      name:
        description: "The human friendly name for the opening"
        type: "string"
      id:
        description: "The ECO id for the opening, e.g. E04"
        type: "string"
        pattern: "[A-E][0-9]{2}"
      variant_names:
        type: "array"
        items:
          type: "string"
  OpeningVariant:
    description: "A named variation of an ECO opening"
    type: "object"
    properties:
      name:
        description: "The human friendly name for the variant" 
        type: "string"
      moves:
        description: "The moves that identify this variant"
        type: "array"
        items:
          $ref: "#/definitions/Move"
  FenRequest:
    description: "Request format for the /fen endpoint"
    type: "object"
    properties:
      fen:
        description: "The position on the board to apply the moves to described in FEN notation"
        type: "string"
      moves:
        description: "The moves to apply to the position on the board"
        type: "array"
        items:
          $ref: "#/definitions/Move"
          