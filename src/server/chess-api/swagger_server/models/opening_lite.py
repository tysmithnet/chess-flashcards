# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
import re  # noqa: F401,E501
from swagger_server import util


class OpeningLite(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, id: str=None, variant_names: List[str]=None):  # noqa: E501
        """OpeningLite - a model defined in Swagger

        :param name: The name of this OpeningLite.  # noqa: E501
        :type name: str
        :param id: The id of this OpeningLite.  # noqa: E501
        :type id: str
        :param variant_names: The variant_names of this OpeningLite.  # noqa: E501
        :type variant_names: List[str]
        """
        self.swagger_types = {
            'name': str,
            'id': str,
            'variant_names': List[str]
        }

        self.attribute_map = {
            'name': 'name',
            'id': 'id',
            'variant_names': 'variant_names'
        }

        self._name = name
        self._id = id
        self._variant_names = variant_names

    @classmethod
    def from_dict(cls, dikt) -> 'OpeningLite':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The OpeningLite of this OpeningLite.  # noqa: E501
        :rtype: OpeningLite
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this OpeningLite.

        The human friendly name for the opening  # noqa: E501

        :return: The name of this OpeningLite.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this OpeningLite.

        The human friendly name for the opening  # noqa: E501

        :param name: The name of this OpeningLite.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def id(self) -> str:
        """Gets the id of this OpeningLite.

        The ECO id for the opening, e.g. E04  # noqa: E501

        :return: The id of this OpeningLite.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this OpeningLite.

        The ECO id for the opening, e.g. E04  # noqa: E501

        :param id: The id of this OpeningLite.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
        if id is not None and not re.search('[A-E][0-9]{2}', id):  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a follow pattern or equal to `/[A-E][0-9]{2}/`")  # noqa: E501

        self._id = id

    @property
    def variant_names(self) -> List[str]:
        """Gets the variant_names of this OpeningLite.


        :return: The variant_names of this OpeningLite.
        :rtype: List[str]
        """
        return self._variant_names

    @variant_names.setter
    def variant_names(self, variant_names: List[str]):
        """Sets the variant_names of this OpeningLite.


        :param variant_names: The variant_names of this OpeningLite.
        :type variant_names: List[str]
        """
        if variant_names is None:
            raise ValueError("Invalid value for `variant_names`, must not be `None`")  # noqa: E501

        self._variant_names = variant_names
